name: Validate Pull Request

on: [push, pull_request]

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      # If we have many bug we can test on all plateform
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/checkout@v1
      - name: Install esy
        run: npm install -g esy
      - run: npm install -g windows-build-tools
      - name: Install native dependencies on ubuntu-latest
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-utils mesa-utils-extra ragel libgtk-3-dev nasm
      - name: Install dependencies
        run: esy install
      - name: Print esy cache
        id: print_esy_cache
        run: node .github/workflows/print_esy_cache.js
      - name: Try to restore dependencies cache
        if: matrix.os != 'windows-latest'
        id: deps-cache-non-win
        uses: actions/cache@v1
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: ${{ matrix.os }}-${{ hashFiles('**/index.json') }}
      - name: Try to restore dependencies cache
        if: matrix.os == 'windows-latest'
        id: deps-cache-win
        uses: actions/cache@v1
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: ${{ matrix.os }}-${{ hashFiles('**\index.json') }}
      - name: Build dependencies
        if: steps.deps-cache-win.outputs.cache-hit != 'true' && steps.deps-cache-non-win.outputs.cache-hit != 'true'
        run: esy build-dependencies --release
      - name: Build
        run: esy build --release
#      - name: Build test/dev dependencies
#        if: steps.deps-cache-win.outputs.cache-hit != 'true' && steps.deps-cache-non-win.outputs.cache-hit != 'true'
#        run: esy build-dependencies
